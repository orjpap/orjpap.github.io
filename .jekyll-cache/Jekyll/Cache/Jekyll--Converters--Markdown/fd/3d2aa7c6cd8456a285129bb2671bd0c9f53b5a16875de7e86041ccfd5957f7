I"¥<p>Enums are often used to model states. If we want to move to the next state (in order of declaration) we have to do the switch dance:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">MyState</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">sleeping</span>
  <span class="k">case</span> <span class="n">working</span>
  <span class="k">case</span> <span class="n">chilling</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">myState</span><span class="p">:</span> <span class="kt">MyState</span> <span class="o">=</span> <span class="o">.</span><span class="n">sleeping</span>

<span class="kd">func</span> <span class="nf">nextState</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">switch</span> <span class="n">myState</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nv">sleeping</span><span class="p">:</span>
    <span class="o">....</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>By conforming an enum to<code class="highlighter-rouge">CaseIterable</code> type, we can access a collection of all of the typeâ€™s cases by using the typeâ€™s <code class="highlighter-rouge">allCases</code> property. The <code class="highlighter-rouge">allCases</code> property is compiler synthesized (for enums that donâ€™t have associated values) and provides the cases in order of their declaration.</p>

<p>We can implement a simple protocol named <code class="highlighter-rouge">CaseSequencable</code> which inherits from the <code class="highlighter-rouge">CaseIterable</code> protocol:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">CaseSequencable</span><span class="p">:</span> <span class="kt">CaseIterable</span><span class="p">,</span> <span class="kt">Equatable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">nextCase</span><span class="p">:</span> <span class="k">Self</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">CaseSequencable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">nextCase</span><span class="p">:</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="c1">// allCases is compiler synthesized (for enums without associated values)</span>
        <span class="c1">// there is no possible way for self to not exist in allCases</span>
        <span class="c1">// if you manually conform to CaseIterable it will crash :D</span>
        <span class="k">let</span> <span class="nv">selfIndex</span> <span class="o">=</span> <span class="k">Self</span><span class="o">.</span><span class="n">allCases</span><span class="o">.</span><span class="nf">firstIndex</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span><span class="k">self</span><span class="p">)</span><span class="o">!</span>

        <span class="k">let</span> <span class="nv">nextIndex</span> <span class="o">=</span> <span class="k">Self</span><span class="o">.</span><span class="n">allCases</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">after</span><span class="p">:</span> <span class="n">selfIndex</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">nextIndex</span> <span class="o">==</span> <span class="k">Self</span><span class="o">.</span><span class="n">allCases</span><span class="o">.</span><span class="n">endIndex</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">Self</span><span class="o">.</span><span class="n">allCases</span><span class="p">[</span><span class="k">Self</span><span class="o">.</span><span class="n">allCases</span><span class="o">.</span><span class="n">startIndex</span><span class="p">]</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">Self</span><span class="o">.</span><span class="n">allCases</span><span class="p">[</span><span class="n">nextIndex</span><span class="p">]</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And use it in the following way:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">MyState</span><span class="p">:</span> <span class="kt">CaseSequencable</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">sleeping</span>
  <span class="k">case</span> <span class="n">working</span>
  <span class="k">case</span> <span class="n">chilling</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">myState</span><span class="p">:</span> <span class="kt">MyState</span> <span class="o">=</span> <span class="o">.</span><span class="n">sleeping</span>

<span class="n">myState</span> <span class="c1">// .sleeping</span>
<span class="n">myState</span><span class="o">.</span><span class="n">next</span> <span class="c1">// .working</span>
<span class="n">myState</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="c1">// .chilling</span>
<span class="n">myState</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="c1">// .sleeping (loops back to the first case)</span>
</code></pre></div></div>

<p>Feel free to <a href="mailto:orjpap@gmail.com">contact me</a> or tweet to me on <a href="https://twitter.com/orjpap">Twitter</a> for tips, feedback, opinions.</p>

<p>Thank you for reading!</p>
:ET