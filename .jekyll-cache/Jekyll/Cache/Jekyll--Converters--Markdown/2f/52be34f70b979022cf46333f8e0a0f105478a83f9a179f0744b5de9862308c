I"¬<p>Using Xcode Playgrounds speeds up your development cycle by reducing compile times. You can make changes to a view, hit compile and view the change in seconds. However, adding Playgrounds that instantiate controllers from your application can be frustrating.</p>

<p>Anything in an App Target is not visible to the playground because App Targets do not define a module. A module is defined bla bla.</p>

<p>Thatâ€™s where frameworks come to play</p>

<p>What you gain from modularising your application using frameworks:</p>

<ul>
  <li>Dependencies become immediately apparent, pushing your to think about designing dependencies. Itâ€™s important to <u>care</u> about dependencies. The better you separate your code from its dependencies the more testable, readable, maintainable it becomes.</li>
  <li>Shorter build times when you make changes to a module. Xcode needs to compile only that module.</li>
  <li>Code reuse in different projects and easier integration.</li>
  <li>Provide clearer interfaces and better encapsulation. The framework only exposes whatâ€™s needed</li>
</ul>

<p>All of this with minimum overhead.</p>

<p>What you gain from using Playgrounds:</p>

<ul>
  <li>Your View Controllers will need to have managed dependencies for Playgrounds to make sense. To be able to load a View Controller in isolation means that itâ€™s well set up for <u>tests</u>.</li>
</ul>

<p>from the fine gents over at <a href="https://www.pointfree.co/episodes/ep21-playground-driven-development">Point Free</a>. Their video introduces their way of using Playgrounds in their everyday development. This blog series provides some extra tips learnt the hard way in development</p>

<p>And even when it becomes clear, Playgrounds crash and will crash and unfortunately most of the times without any useful debugging information since Playgrounds run using the <a href="https://developer.apple.com/swift/blog/?id=18">Swift REPL</a> (more on this on part 2).</p>

:ET